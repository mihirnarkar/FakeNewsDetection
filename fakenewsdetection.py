# -*- coding: utf-8 -*-
"""FakeNewsDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aqDzlFaH66jMHyB9i8TEivhGrTD0_Skg
"""

# train.csv: A full training dataset with the following attributes:

# id: unique id for a news article
# title: the title of a news article
# author: author of the news article
# text: the text of the article; could be incomplete
# label: a label that marks the article as potentially unreliable
# 1: unreliable
# 0: reliable
# test.csv: A testing training dataset with all the same attributes at train.csv without the label.

# submit.csv: A sample submission that you can

# kaggle competitions download -c fake-news

# 1 - fake news
# 0 - real news



"""# Importing the dependencies"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords  # nltk(natural language toolkit)
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

# Stopwords:- Words which dont add any value to our data

# Printing stopwords:-
print(stopwords.words('english'))



"""Data pre-processing"""

# Loading the dataset to a pandas dataframe

news_dataset = pd.read_csv('/content/drive/MyDrive/DS/Practise/ML practise/project/train.csv')

news_dataset.shape

news_dataset.head(5)



"""Counting the number of missing values in dataset"""

news_dataset.isnull().sum()

"""Replacing mssing values with empty string"""

news_dataset = news_dataset.fillna('')

news_dataset.isnull().sum()

# No null values is present now

# merging the author name and news title

news_dataset['content'] = news_dataset['author']+' '+news_dataset['title']

print(news_dataset['content'])

print(news_dataset)

# Seperating the data and label
X = news_dataset.drop(columns='label',axis=1)
Y = news_dataset['label']

print(X)

print(Y)



"""Stemming:- It is the process of reducing the word to its root word
eg:- actor, actress, acting --> act
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]',' ',content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content



news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])



"""Seperating the data and label"""

X = news_dataset['content'].values #data
Y = news_dataset['label'].values #labels

print(X)

print(Y)

X.shape

Y.shape

# Converting textual data to numerical data

vectorizer = TfidfVectorizer()
vectorizer.fit(X)
X = vectorizer.transform(X)

print(X)

# Soo yes our data is converted into numerical form



"""Slitting the dataset to training and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)



"""Training the model: Logistic reagression"""

model = LogisticRegression()

model.fit(X_train,Y_train)



"""Evaluation: Accuracy score"""

# accuracy score on the training data

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)
print("Accuracy score of the training data: ",training_data_accuracy)

# accuracy score on the test data

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)
print("Accuracy score of the test data: ",test_data_accuracy)



"""# Making a prediction system"""

X_new = X_test[10]
prediction = model.predict(X_new)
print(prediction)
if (prediction[0]==0):
  print("News is real")
else:
  print("News is fake")

# Now to check whether the model is predicting right or wrong

print(Y_test[10])

# This indicates model is predicting accurate results